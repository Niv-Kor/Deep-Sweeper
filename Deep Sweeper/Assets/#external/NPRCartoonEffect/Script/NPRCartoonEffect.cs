using UnityEngine;using System.Collections.Generic;public class NPRCartoonEffect : MonoBehaviour{	[Header("Ramp")]	[Range(0f, 2f)] public float m_Saturation = 1f;	public Color m_HighlitColor = Color.white;	public Color m_DarkColor = Color.grey;	public bool m_UseStylizedShadow = false;	public Texture2D m_StylizedShadow;	[Range(2f, 16f)] public float m_StylizedShadowScale = 8f; 	public bool m_UseRampTexture = true;	public Texture2D m_Ramp;	[Range(0f, 1f)] public float m_RampThreshold = 0.5f;	[Range(0.01f, 1f)] public float m_RampSmooth = 0.1f;	[Header("Specular")]	public Color m_SpecularColor = Color.white;	public enum ESpecType { None, Common, Stylized };	public ESpecType m_SpecType = ESpecType.None;	[Range(32f, 256f)] public float m_SpecPower = 128f;	[Range(0.01f, 1f)] public float m_SpecSmooth = 0.1f;	[Range(0f, 0.05f)] public float m_SpecScale = 0.01f;	[Range(-1f, 1f)] public float m_SpecTranslationX = 0f;	[Range(-1f, 1f)] public float m_SpecTranslationY = 0f;	[Range(-180f, 180f)] public float m_SpecRotationX = 0f;	[Range(-180f, 180f)] public float m_SpecRotationY = 0f;	[Range(-180f, 180f)] public float m_SpecRotationZ = 0f;	[Range(-1f, 1f)] public float m_SpecScaleX = 0f;	[Range(-1f, 1f)] public float m_SpecScaleY = 0f;	[Range(0f, 1f)]	public float m_SpecSplitX = 0f;	[Range(0f, 1f)]	public float m_SpecSplitY = 0f;	[Header("Rim")]	public Color m_RimColor = Color.white;	[Range(0.01f, 1f)] public float m_RimMin = 0.5f;	[Range(0.01f, 1f)] public float m_RimMax = 0.55f;	[Header("Outline")]	public Color m_OutlineColor = Color.black;	[Range(0.01f, 0.1f)] public float m_OutlineWidth = 0.02f;	[Range(0f, 1f)] public float m_OutlineExpand = 1f;	public Material[] m_Mats;	int m_ID_StylizedShadowTex = 0;	int m_ID_RampTex = 0;	int m_ID_RampThreshold = 0;	int m_ID_RampSmooth = 0;	int m_ID_HighlitColor = 0;	int m_ID_DarkColor = 0;	int m_ID_SpecularColor = 0;	int m_ID_SpecPower = 0;	int m_ID_SpecSmooth = 0;	int m_ID_SpecularScale = 0;	int	m_ID_SpecularTranslationX = 0;	int m_ID_SpecularTranslationY = 0;	int m_ID_SpecularRotationX = 0;	int m_ID_SpecularRotationY = 0;	int m_ID_SpecularRotationZ = 0;	int m_ID_SpecularScaleX = 0;	int m_ID_SpecularScaleY = 0;	int m_ID_SpecularSplitX = 0;	int m_ID_SpecularSplitY = 0;	int m_ID_RimColor = 0;	int m_ID_RimMin = 0;	int m_ID_RimMax = 0;	int m_ID_OutlineColor = 0;	int m_ID_OutlineWidth = 0;	int m_ID_ExpandFactor = 0;	int m_ID_Saturation = 0;		public void Initialize ()	{		Renderer rd = GetComponent<Renderer> ();		m_Mats = rd.materials;		m_ID_StylizedShadowTex = Shader.PropertyToID ("_StylizedShadowTex");		m_ID_RampTex = Shader.PropertyToID ("_RampTex");		m_ID_RampThreshold = Shader.PropertyToID ("_RampThreshold");		m_ID_RampSmooth = Shader.PropertyToID ("_RampSmooth");		m_ID_HighlitColor = Shader.PropertyToID ("_HighlitColor");		m_ID_DarkColor = Shader.PropertyToID ("_DarkColor");		m_ID_SpecularColor = Shader.PropertyToID ("_SpecularColor");		m_ID_SpecPower = Shader.PropertyToID ("_SpecPower");		m_ID_SpecSmooth = Shader.PropertyToID ("_SpecSmooth");		m_ID_SpecularScale = Shader.PropertyToID ("_SpecularScale");		m_ID_SpecularTranslationX = Shader.PropertyToID ("_SpecularTranslationX");		m_ID_SpecularTranslationY = Shader.PropertyToID ("_SpecularTranslationY");		m_ID_SpecularRotationX = Shader.PropertyToID ("_SpecularRotationX");		m_ID_SpecularRotationY = Shader.PropertyToID ("_SpecularRotationY");		m_ID_SpecularRotationZ = Shader.PropertyToID ("_SpecularRotationZ");		m_ID_SpecularScaleX = Shader.PropertyToID ("_SpecularScaleX");		m_ID_SpecularScaleY = Shader.PropertyToID ("_SpecularScaleY");		m_ID_SpecularSplitX = Shader.PropertyToID ("_SpecularSplitX");		m_ID_SpecularSplitY = Shader.PropertyToID ("_SpecularSplitY");		m_ID_RimColor = Shader.PropertyToID ("_RimColor");		m_ID_RimMin = Shader.PropertyToID ("_RimMin");		m_ID_RimMax = Shader.PropertyToID ("_RimMax");		m_ID_OutlineColor = Shader.PropertyToID ("_OutlineColor");		m_ID_OutlineWidth = Shader.PropertyToID ("_OutlineWidth");		m_ID_ExpandFactor = Shader.PropertyToID ("_ExpandFactor");		m_ID_Saturation = Shader.PropertyToID ("_Saturation");	}	public void UpdateSelfParameters ()	{		for (int i = 0; i < m_Mats.Length; i++)		{			List<string> keywords = new List<string>();			if (m_UseStylizedShadow)				keywords.Add ("NCE_STYLIZED_SHADOW");			if (m_UseRampTexture)				keywords.Add ("NCE_RAMP_TEXTURE");			if (m_SpecType == ESpecType.Common)			{				keywords.Add ("NCE_SPECULAR");			}			else if (m_SpecType == ESpecType.Stylized)			{				keywords.Add ("NCE_SPECULAR");				keywords.Add ("NCE_STYLIZED_SPECULAR");			}			m_Mats[i].shaderKeywords = keywords.ToArray ();			m_Mats[i].SetTexture (m_ID_StylizedShadowTex, m_StylizedShadow);			m_Mats[i].SetTextureScale("_StylizedShadowTex", new Vector2 (m_StylizedShadowScale, m_StylizedShadowScale));			m_Mats[i].SetTexture (m_ID_RampTex, m_Ramp);			m_Mats[i].SetFloat (m_ID_RampThreshold, m_RampThreshold);			m_Mats[i].SetFloat (m_ID_RampSmooth, m_RampSmooth);			m_Mats[i].SetColor (m_ID_HighlitColor, m_HighlitColor);			m_Mats[i].SetColor (m_ID_DarkColor, m_DarkColor);			m_Mats[i].SetColor (m_ID_SpecularColor, m_SpecularColor);			m_Mats[i].SetFloat (m_ID_SpecPower, m_SpecPower);			m_Mats[i].SetFloat (m_ID_SpecSmooth, m_SpecSmooth);			m_Mats[i].SetFloat (m_ID_SpecularScale, m_SpecScale);			m_Mats[i].SetFloat (m_ID_SpecularTranslationX, m_SpecTranslationX);			m_Mats[i].SetFloat (m_ID_SpecularTranslationY, m_SpecTranslationY);			m_Mats[i].SetFloat (m_ID_SpecularRotationX, m_SpecRotationX);			m_Mats[i].SetFloat (m_ID_SpecularRotationY, m_SpecRotationY);			m_Mats[i].SetFloat (m_ID_SpecularRotationZ, m_SpecRotationZ);			m_Mats[i].SetFloat (m_ID_SpecularScaleX, m_SpecScaleX);			m_Mats[i].SetFloat (m_ID_SpecularScaleY, m_SpecScaleY);			m_Mats[i].SetFloat (m_ID_SpecularSplitX, m_SpecSplitX);			m_Mats[i].SetFloat (m_ID_SpecularSplitY, m_SpecSplitY);			m_Mats[i].SetColor (m_ID_RimColor, m_RimColor);			m_Mats[i].SetFloat (m_ID_RimMin, m_RimMin);			m_Mats[i].SetFloat (m_ID_RimMax, m_RimMax);			m_Mats[i].SetColor (m_ID_OutlineColor, m_OutlineColor);			m_Mats[i].SetFloat (m_ID_OutlineWidth, m_OutlineWidth);			m_Mats[i].SetFloat (m_ID_ExpandFactor, m_OutlineExpand);			m_Mats[i].SetFloat (m_ID_Saturation, m_Saturation);		}	}	public void SetMaterialsTexture (string name, Texture t)	{		for (int i = 0; i < m_Mats.Length; i++)			m_Mats[i].SetTexture (name, t);	}}